name: Spin CLI
run-name: Spin CLI ${{ github.ref_name }} (${{ github.event_name }})

on:
  workflow_call:
    inputs:
      version-override:
        description: Overrides the version for artifacts (e.g. "1.37.1").  Otherwise, uses the auto-incrementing build number for the current branch.
        type: string

  workflow_dispatch:
    inputs:
      version-override:
        description: Overrides the version for artifacts (e.g. "1.37.1").  Otherwise, uses the auto-incrementing build number for the current branch.
        type: string

  push:
    branches:
      - main
      - release-*
    paths:
      - 'spin/**'

  pull_request:
    branches:
      - main
      - release-*
    paths:
      - 'spin/**'

env:
  REGISTRY_REGION: us-docker.pkg.dev
  CONTAINER_REGISTRY: us-docker.pkg.dev/spinnaker-community/docker
  GCS_BUCKET: 'spinnaker-artifacts/spin'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/version
        id: version
        with:
          namespace: spin
          version-override: ${{ inputs.version-override }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@v5
        with:
          go-version-file: spin/go.mod
          cache: false

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: zulu
          cache: ${{ !env.ACT && 'gradle' || '' }}

      - uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Gate API
        run: ./gradlew :spin:gateapi

      - name: Ensure code formatting and style is consistent
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0
          working-directory: spin

      - name: Build binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: ./gradlew :spin:gorelease

      - name: Login to Google Cloud
        uses: google-github-actions/auth@v2
        if: github.event_name != 'pull_request'
        with:
          credentials_json: ${{ secrets.GAR_JSON_KEY }}

      - name: Upload spin CLI binaries to GCS
        uses: google-github-actions/upload-cloud-storage@v2
        if: github.event_name != 'pull_request'
        with:
          path: 'spin/dist/'
          destination: ${{ env.GCS_BUCKET }}
          parent: false

      - name: Determine latest spin CLI version and write to '(MAJOR.MINOR.x-)latest' files
        continue-on-error: true
        if: github.event_name != 'pull_request'
        run: |
          gcs_latest="$(curl -s https://storage.googleapis.com/spinnaker-artifacts/spin/latest)"
          release=${{ steps.version.outputs.version }}

          cat <<EOF
          gcs_latest: $gcs_latest
          release: $release
          EOF

          mkdir -p dist/latests
          echo "$release" > dist/latests/latest
          if [[ '${{ steps.version.outputs.is-release }}' == 'true' ]]; then
            echo "$release" > dist/latests/"${{ steps.version.outputs.release-train-suffixed }}-latest"
          fi

      - name: Upload latest version reference files
        # See: https://spinnaker.io/docs/setup/other_config/spin/
        uses: google-github-actions/upload-cloud-storage@v2
        if: github.event_name != 'pull_request'
        with:
          path: 'dist/latests'
          destination: ${{ env.GCS_BUCKET }}
          parent: false

      - name: Build and publish container image
        uses: ./.github/actions/publish-docker
        with:
          project: spin
          version: ${{ steps.version.outputs.version }}
          build-command: 'false'
          release-train: ${{ steps.version.outputs.release-train}}
          build-url: ${{ steps.version.outputs.build-url }}
          push: ${{ github.event_name != 'pull_request' }}
          gar-json-key: ${{ secrets.GAR_JSON_KEY }}
