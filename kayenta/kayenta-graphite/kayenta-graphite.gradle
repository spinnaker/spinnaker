buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Apache 2.0, https://github.com/ozimov/embedded-redis#license
        classpath 'it.ozimov:embedded-redis:0.7.2'
        classpath 'com.github.docker-java:docker-java:3.1.0-rc-5'
    }
}


import com.github.dockerjava.api.model.ExposedPort
import com.github.dockerjava.api.model.Ports
import com.github.dockerjava.core.DockerClientBuilder
import redis.embedded.RedisServer

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

int getOpenPort(String service) {
    ServerSocket socket
    try {
        socket = new ServerSocket(0)
        socket.setReuseAddress(true)
        def port = socket.getLocalPort()
        logger.lifecycle("Using port: ${port} for ${service}")
        socket.close()
        return port
    } catch (Exception e) {
        logger.lifecycle("Failed to find open port for ${service}", e)
        if (socket != null) {
            socket.close()
        }
        throw new RuntimeException(e)
    }
}

//noinspection GroovyAssignabilityCheck
task startEmbeddedRedis() {
    group 'Application'
    description 'Starts an embedded Redis server on an open port.'

    doLast {
        def redisPort = getOpenPort("Redis")
        String redisBinPath = getRequiredSystemProp('redis.path')
        File redisBin = new File(redisBinPath)
        if (!redisBin.exists()) {
            //noinspection GroovyAssignabilityCheck
            throw new GradleScriptException("The redis executable at '${redisBinPath}' did not exist")
        }
        def redisServer = new RedisServer(redisBin, redisPort)
        redisServer.start()
        startEmbeddedRedis.ext.redisServer = redisServer
        startEmbeddedRedis.ext.redisPort = redisPort
    }
}

//noinspection GroovyAssignabilityCheck
task stopEmbeddedRedis() {
    dependsOn startEmbeddedRedis
    group 'Application'
    description 'Stops the embedded Redis server.'

    doLast {
        startEmbeddedRedis.ext.redisServer.stop()
    }
}

//noinspection GroovyAssignabilityCheck
task startGraphite() {
    group 'Application'
    description 'Starts an embedded Graphite'

    doLast {
        def graphiteTag = getRequiredSystemPropWithDefault('graphite.tag', 'latest')

        def graphiteQueryPort = getOpenPort("Graphite query")
        def graphiteFeedPort = getOpenPort("Graphite feed")

        def dockerClient = DockerClientBuilder.getInstance().build()

        def portBindings = new Ports()
        portBindings.bind(ExposedPort.tcp(80), Ports.Binding.bindPort(graphiteQueryPort))
        portBindings.bind(ExposedPort.tcp(2003), Ports.Binding.bindPort(graphiteFeedPort))

        def container = dockerClient.createContainerCmd("graphiteapp/graphite-statsd:${graphiteTag}")
                .withPortBindings(portBindings)
                .exec()
        dockerClient.startContainerCmd(container.getId()).exec()
        startGraphite.ext.dockerClient = dockerClient
        startGraphite.ext.container = container
        startGraphite.ext.graphiteQueryPort = graphiteQueryPort
        startGraphite.ext.graphiteFeedPort = graphiteFeedPort
    }
}

//noinspection GroovyAssignabilityCheck
task stopGraphite() {
    dependsOn startGraphite
    group 'Application'
    description 'Stops the embedded Graphite'

    doLast {
        startGraphite.ext.dockerClient.stopContainerCmd(startGraphite.ext.container.getId()).exec()
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRequiredSystemProp(String key) {
    String value = System.getProperty(key)
    if (value == null || value == "") {
        throw new IllegalStateException("The system property ${key} was not supplied to the gradle script via a -D param".toString())
    }
    return value
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRequiredSystemPropWithDefault(String key, String defaultValue) {
    String value = System.getProperty(key)
    if (value == null || value == "") {
        logger.lifecycle("Could not find the input for ${key}, will use the dafault value ${defaultValue}")
        return defaultValue
    }
    return value
}

//noinspection GroovyAssignabilityCheck
task integrationTest(type: Test) {
    doFirst {
        systemProperty("redis.port", startEmbeddedRedis.ext.redisPort)
        systemProperty("graphite.queryPort", startGraphite.ext.graphiteQueryPort)
        systemProperty("graphite.feedPort", startGraphite.ext.graphiteFeedPort)
        systemProperty("canary.config",
                getRequiredSystemPropWithDefault("canary.config", "integration-test-canary-config.json"))
        systemProperty("canary.marginal", getRequiredSystemPropWithDefault("canary.marginal", "50"))
        systemProperty("canary.pass", getRequiredSystemPropWithDefault("canary.pass", "75"))
    }
    systemProperty("spring.application.name", "kayenta")
    systemProperty('spring.config.name', "spinnaker,kayenta")
    systemProperty('spring.config.location', "file:${project.rootDir}/kayenta-graphite/src/integration-test/resources/config/")
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.integrationTest.dependsOn 'startEmbeddedRedis', 'startGraphite'
tasks.integrationTest.finalizedBy 'stopEmbeddedRedis', 'stopGraphite'

integrationTest {
    testLogging {
        showStandardStreams = true
    }
}

configurations {
    integrationTestImplementation.extendsFrom configurations.testImplementation
    integrationTestRuntime.extendsFrom configurations.testRuntime
}

dependencies {
    implementation project(":kayenta-core")
    implementation "com.squareup.retrofit2:converter-jackson"

    api "org.apache.commons:commons-io:1.3.2"

 //   testImplementation "com.fasterxml.jackson.core:jackson-databind"

    // Integration Test dependencies
    integrationTestImplementation sourceSets.main.output
    integrationTestImplementation sourceSets.test.output
    integrationTestImplementation project(':kayenta-web')

    // Apache 2.0 https://github.com/rest-assured/rest-assured/blob/master/LICENSE
    integrationTestImplementation "io.rest-assured:rest-assured"
    integrationTestAnnotationProcessor platform("io.spinnaker.orca:orca-bom")
    integrationTestAnnotationProcessor "org.projectlombok:lombok"
    integrationTestCompileOnly "org.projectlombok:lombok"
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestImplementation.extendsFrom testRuntime
}
