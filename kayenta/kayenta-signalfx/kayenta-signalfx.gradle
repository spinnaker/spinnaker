buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // Apache 2.0, https://github.com/ozimov/embedded-redis#license
    classpath 'it.ozimov:embedded-redis:0.7.2'
  }
}

import redis.embedded.RedisServer

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integration-test/java')
    }
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

int getOpenPort() {
  ServerSocket socket
  try {
    socket = new ServerSocket(0)
    socket.setReuseAddress(true)
    def port = socket.getLocalPort()
    logger.lifecycle("Using port: ${port} for Redis")
    socket.close()
    return port
  } catch (Exception e) {
    logger.lifecycle("Failed to find open port for Redis", e)
    if (socket != null) {
      socket.close()
    }
    throw new RuntimeException(e)
  }
}

//noinspection GroovyAssignabilityCheck
task startEmbeddedRedis() {
  group 'Application'
  description 'Starts an embedded Redis server on an open port.'

  doLast {
    def redisPort = getOpenPort()
    String redisBinPath = getRequiredSystemProp('redis.path')
    File redisBin = new File(redisBinPath)
    if (!redisBin.exists()) {
      //noinspection GroovyAssignabilityCheck
      throw new GradleScriptException("The redis executable at '${redisBinPath}' did not exist")
    }
    def redisServer = new RedisServer(redisBin, redisPort)
    redisServer.start()
    startEmbeddedRedis.ext.redisServer = redisServer
    startEmbeddedRedis.ext.redisPort = redisPort
  }
}

//noinspection GroovyAssignabilityCheck
task stopEmbeddedRedis() {
  dependsOn startEmbeddedRedis
  group 'Application'
  description 'Stops the embedded Redis server.'

  doLast {
    startEmbeddedRedis.ext.redisServer.stop()
  }
}

@SuppressWarnings("GrMethodMayBeStatic")
String getRequiredSystemProp(String key) {
  String value = System.getProperty(key)
  if (value == null || value == "") {
    throw new IllegalStateException("The system property ${key} was not supplied to the gradle script via a -D param".toString())
  }
  return value
}

//noinspection GroovyAssignabilityCheck
task integrationTest(type: Test) {
  doFirst {
    systemProperty("redis.port", startEmbeddedRedis.ext.redisPort)
    systemProperty("kayenta.signalfx.apiKey", getRequiredSystemProp('kayenta.signalfx.apiKey'))
  }
  systemProperty("spring.application.name", "kayenta")
  systemProperty('spring.config.name', "spinnaker,kayenta")
  systemProperty('spring.config.location', "file:${project.rootDir}/kayenta-signalfx/src/integration-test/resources/config/")
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

tasks.integrationTest.dependsOn 'startEmbeddedRedis'
tasks.integrationTest.finalizedBy 'stopEmbeddedRedis'

integrationTest {
  testLogging {
    showStandardStreams = true
  }
}

configurations {
  integrationTestImplementation.extendsFrom configurations.testImplementation
  integrationTestRuntime.extendsFrom configurations.testRuntime
}

dependencies {
  implementation project(":kayenta-core")

  api 'com.signalfx.public:signalfx-java:1.0.5'

  testImplementation project(":kayenta-standalone-canary-analysis")
  testImplementation "com.squareup.retrofit2:converter-jackson"
  // Integration Test dependencies
  integrationTestImplementation sourceSets.main.output
  integrationTestImplementation sourceSets.test.output
  integrationTestImplementation project(':kayenta-web')

  // Apache 2.0 https://github.com/rest-assured/rest-assured/blob/master/LICENSE
  integrationTestImplementation "io.rest-assured:rest-assured"

  integrationTestAnnotationProcessor platform("io.spinnaker.orca:orca-bom")
  integrationTestAnnotationProcessor "org.projectlombok:lombok"
  integrationTestCompileOnly "org.projectlombok:lombok"
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestImplementation.extendsFrom testRuntime
}

test {
  testLogging {
    events "passed", "skipped", "failed"
  }
}
